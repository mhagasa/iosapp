import {LANGUAGE_CODE, RESPONSE_STATUS} from '../constants/app-constants';
import {ASYNCSTORAGE_KEYS} from '../constants/asyncStorage-constants';
import KVAsyncStorage from '../services/KVAsyncStorage';
import KVUserApiManager from '../services/KVUserApiManager';

export class KVUserManager {
  user;
  token;
  language;

  /*
   * constructor
   */
  constructor() {
    new KVAsyncStorage().getUserDetails().then(data => {
      this.user = JSON.parse(data);
    });
    new KVAsyncStorage().getToken().then(data => {
      this.token = JSON.parse(data);
    });
    new KVAsyncStorage().getItems(ASYNCSTORAGE_KEYS.KEY_LANGUAGE).then(data => {
      this.language = JSON.parse(data) || LANGUAGE_CODE.ENGLISH;
    });
  }

  /*
   * method to return
   * user
   * token
   */
  getUserAndToken() {
    return {userDetail: this.user, token: this.token, language: this.language};
  }

  /*
   * method to get token from storage
   */
  async getTokenFromStorage() {
    return await new KVAsyncStorage().getToken();
  }

  /*
   *  method to get user details from token
   */
  async getUserDetailsFromStorage() {
    return new KVAsyncStorage().getUserDetails();
  }

  /*
   * method to set language
   */
  async setLanguage(language) {
    this.language = language;
    return await new KVAsyncStorage().setItems(
      ASYNCSTORAGE_KEYS.KEY_LANGUAGE,
      language,
    );
  }

  /*
   * method to verify token
   */
  async verifyToken() {
    let token = await new KVAsyncStorage().getToken();
    let response = await new KVUserApiManager().verifyToken(JSON.parse(token));
    return response;
  }

  /*
   * method to verify token
   */
  async register(user) {
    let response;
    try {
      response = await new KVUserApiManager().registerUser(user);

      if (response && response.status === RESPONSE_STATUS.SUCCESS) {
        await new KVAsyncStorage().storeUserAndToken(
          response.responseData,
          response.token,
        );
        this.user = response.responseData;
      }
      return response;
    } catch (err) {
      return new KVResponse(
        RESPONSE_STATUS.ERROR,
        400,
        err && err.message ? err.message : JSON.stringify(err),
      );
    }
  }

  /*
   * method to connect to login api
   * @param   user => userdetails
   */
  async login(user) {
    let response = await new KVUserApiManager().login(user);
    if (response && response.status === RESPONSE_STATUS.SUCCESS) {
      await new KVAsyncStorage().storeUserAndToken(
        response.responseData.userDetail,
        response.responseData.token,
      );
      this.user = response.responseData.userDetail;
    }
    return response;
  }

  /*
   * method to clear roomlist and async storage data
   */
  async clearAllData() {
    this.user = null;
    this.token = null;
    await new KVAsyncStorage().clearItems(ASYNCSTORAGE_KEYS.KEY_USER);
    await new KVAsyncStorage().clearItems(ASYNCSTORAGE_KEYS.KEY_TOKEN);
    await new KVAsyncStorage().clearItems(ASYNCSTORAGE_KEYS.KEY_LANGUAGE);
  }

  /**
   * method to send password reset OTP
   * @param {*} mobile 
   * @returns 
   */
  async sendAutoGeneratedOtp(mobile) {
    try {
      return await new KVUserApiManager().sendAutoGeneratedOtp(mobile);
    } catch (err) {
      return new KVResponse(
        RESPONSE_STATUS.ERROR,
        400,
        err && err.message ? err.message : JSON.stringify(err),
      );
    }

  }
  /**
   * method to reset user password
   */
  async resetPassword(data) {
    try {
      return await new KVUserApiManager().resetPassword(data);
    } catch (err) {
      return new KVResponse(
        RESPONSE_STATUS.ERROR,
        400,
        err && err.message ? err.message : JSON.stringify(err),
      );
    }

  }
}
