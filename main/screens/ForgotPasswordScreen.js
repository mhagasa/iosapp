import React, {useState, useEffect} from 'react';
import {
  Image,
  View,
  StyleSheet,
  TextInput,
  ToastAndroid,
  TouchableOpacity,
  Text,
  BackHandler
} from 'react-native';
import {RESPONSE_STATUS, SCREEN_NAME} from '../constants/app-constants';
import KVButton from '../components/KVButton'; 
import {KVMainView} from '../components/KVMainView';
import {
  CONTAINER_COLOR,
  DIMENSIONS,
  FONT_CONSTANTS,
} from '../constants/theme-constants';
import strings from '../localizations/screen';
import {validateMobile} from '../validation/KVUserValidation';
import KVUserApiManager from '../services/KVUserApiManager';
import {KVUserManager} from '../contexts/KVUserManager';

export default function ForgotPasswordScreen({navigation}) {
  const [mobile, setMobile] = useState(''); // Simple string state
  const [indicator, setIndicator] = useState(false);
  /*
   * Hook to handle back button
   */
  useEffect(() => {
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      () => {
        navigation.pop();
        return true;
      },
    );
  }, []);

  /*
   * Handler method for OTP button
   */
  const optHandler = async () => {
    try {
      var validationResult = validateMobile(mobile);
      if (!validationResult.isValid) {
        ToastAndroid.showWithGravity(
          validationResult.errorMessage,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
        return;
      }
      setIndicator(true);

      let response = await new KVUserManager().sendAutoGeneratedOtp({
        contacts: mobile,
      });

      if (response.status === RESPONSE_STATUS.SUCCESS) {
        setIndicator(false);
        ToastAndroid.showWithGravity(
          strings.otpSentToMobile,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
        navigation.navigate(SCREEN_NAME.RESETPASSWORDCONFIRMATION, {
          mobile: mobile,
        });
      } else {
        setIndicator(false);
        ToastAndroid.showWithGravity(
          strings.failedToSendOTP,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
      }
    } catch (error) {
      setIndicator(false);
      ToastAndroid.showWithGravity(
        strings.errorOccured,
        ToastAndroid.SHORT,
        ToastAndroid.TOP,
      );
      console.error('Error:', error);
    }
  };
  /**
   * Handler mehtod for login button
   */
  const onLoginHandler = () => {
    navigation.navigate(SCREEN_NAME.LOGIN);
  };

  return (
    <View style={{flex: 1}}>
      <KVMainView indicator={indicator}>
        <View style={styles.card}>
          <Image
            source={require('../assets/img/ic_launcher_round.png')}
            style={styles.image}
          />
          <View style={styles.form}>
            <View style={styles.inputs}>
              <TextInput
                style={styles.input}
                keyboardType="number-pad"
                placeholder={strings.mobile}
                autoCapitalize="none"
                onChangeText={text => setMobile(text.trim())} // Update directly
                maxLength={10}
                value={mobile}
              />
              <KVButton value={strings.sendOtp} onPressHandler={optHandler} />
              <TouchableOpacity onPress={onLoginHandler}>
                <Text style={styles.haveAccountLogin}>{strings.login}</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </KVMainView>
    </View>
  );
}

const styles = StyleSheet.create({
  image: {
    flex: 1,
    alignSelf: 'center',
    justifyContent: 'center',
    marginTop: '10%',
  },
  card: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: CONTAINER_COLOR.LIGHTGREY,
    borderRadius: 10,
    width: '90%',
    alignSelf: 'center',
    alignItems: 'center',
    alignContent: 'center',
    marginTop: DIMENSIONS.HEIGHT / 7,
  },
  form: {
    flex: 1,
    justifyContent: 'space-between',
    paddingBottom: '10%',
    width: '100%',
    alignItems: 'center',
  },
  inputs: {
    width: '90%',
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: '8%',
  },
  input: {
    borderBottomWidth: 1,
    borderBottomColor: 'black',
    paddingTop: '5%',
    fontSize: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
    minHeight: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
    width: '100%',
  },
  haveAccountLogin: {
    flexDirection: 'row', // Ensures the text is in the same row
    color: '#007BFF',
  },
});
