import React, {useState, useEffect, useRef} from 'react';
import KVSMSManager from '../contexts/KVSMSManager';
import {
  Text,
  View,
  StyleSheet,
  KeyboardAvoidingView,
  TouchableOpacity,
  ToastAndroid,
  TextInput,
  BackHandler,
  TouchableWithoutFeedback,
} from 'react-native';
import {
  SCREEN_NAME,
  USER_TYPE,
  RESPONSE_STATUS,
} from '../constants/app-constants';
import strings from '../localizations/screen';
import {KVUserManager} from '../contexts/KVUserManager';
import { FONT_CONSTANTS, OTP_INPUT_BOX_COLOR } from '../constants/theme-constants';

export default function SendRegisterOtpScreen({navigation, route}) {
  let textInput = useRef(null);
  let clockCall = null;
  const lenthInput = 6;
  const defaultCountDown = 30;
  const [internalVal, setInternalVal] = useState('');
  const [countDown, setCountDown] = useState(defaultCountDown);
  const [enableResend, setEnableResend] = useState(false);
  /**
   * Hook to handle timer
   */
  useEffect(() => {
    // Set up the countdown timer
    clockCall = setInterval(() => {
      decrementClock();
    }, 1000);

    // Cleanup on component unmount
    return () => {
      clearInterval(clockCall);
    };
  });
  /**
   * Hook to send SMS Register when the screen loads
   */
  useEffect(() => {
    // Send SMS when the page loads
    const smsData = {
      contacts: route.params.paramKey.mobile.toString(),
      msg: route.params.paramKey.otp.toString(),
    };
    sendRegisterSms(smsData);
  }, []); // The empty dependency array ensures this runs only once

  /**
   * Method to decrement timer by 1 second
   */
  const decrementClock = () => {
    if (countDown === 0) {
      setEnableResend(true);
      setCountDown(0);
      clearInterval(clockCall);
    } else {
      setCountDown(prev => prev - 1);
    }
  };

  /**
   * Method to handle OTP length check when user enters OTP
   * @param {*} val
   */
  const onChangeText = val => {
    setInternalVal(val);
    if (val.length === lenthInput) {
      var otpData = {
        mobile: route.params.paramKey.mobile.toString(),
        otp: val,
      };
      verifyOtp(otpData);
    }
  };

  /**
   * Method to send Register OTP
   * @param {*} smsData
   */
  const sendRegisterSms = async smsData => {
    try {
      var response = await new KVSMSManager().sendRegisterSms(smsData);
      if (response && response.status == RESPONSE_STATUS.SUCCESS) {
        ToastAndroid.showWithGravity(
          strings.otpSentToMobile,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
      } else {
        ToastAndroid.showWithGravity(
          response.errorMessage,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
      }
    } catch (ex) {
      console.log(ex);
      ToastAndroid.showWithGravity(
        ex.errorMessage,
        ToastAndroid.SHORT,
        ToastAndroid.TOP,
      );
    }
  };

  /**
   * Method to Verify OTP
   * @param {*} otpData
   */
  const verifyOtp = async otpData => {
    try {
      var response = await new KVSMSManager().verifyOtp(otpData);
      if (response.status == RESPONSE_STATUS.SUCCESS) {
        let navigationScreen =
          route.params.registerUser.userType == USER_TYPE.USER_TYPE_LANDLORD
            ? SCREEN_NAME.TABNAVIGATOR
            : SCREEN_NAME.TENANTHOME;
        navigation.navigate(navigationScreen);
      } else {
        // if failure display localized error
        ToastAndroid.showWithGravity(
          response.errorMessage,
          ToastAndroid.SHORT,
          ToastAndroid.TOP,
        );
      }
    } catch (ex) {
      console.log(ex);
      ToastAndroid.showWithGravity(
        ex.errorMessage,
        ToastAndroid.SHORT,
        ToastAndroid.TOP,
      );
    }
  };

  /**
   * Method to handle textInput focus
   */
  const handlePressCell = () => {
    if (textInput.current) {
      textInput.current.focus();
    }
  };
  /**
   * Method to Re-send OTP
   */
  const onResendOTP = async () => {
    try {
      if (enableResend) {
        setCountDown(defaultCountDown);
        setEnableResend(false);
        const smsData = {
          contacts: route.params.paramKey.mobile.toString(),
        };

        // Uncomment for actual API call:
        let response = await new KVUserManager().sendAutoGeneratedOtp(smsData);
        if (response && response.status == RESPONSE_STATUS.SUCCESS) {
          ToastAndroid.showWithGravity(
            strings.optReSentEnterbelow,
            ToastAndroid.SHORT,
            ToastAndroid.TOP,
          );
        } else {
          ToastAndroid.showWithGravity(
            response.errorMessage,
            ToastAndroid.SHORT,
            ToastAndroid.TOP,
          );
        }
      }
    } catch (ex) {
      console.log(ex);
      ToastAndroid.showWithGravity(
        ex.errorMessage,
        ToastAndroid.SHORT,
        ToastAndroid.TOP,
      );
    }
  };

  //handles back button press
  useEffect(() => {
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      () => {
        navigation.pop();
        return true;
      },
    );
  }, []);

  return (
    <View style={styles.container}>
      <KeyboardAvoidingView
        keyboardVerticalOffset={50}
        behavior={'padding'}
        style={styles.containerAvoiddingView}>
        <Text style={styles.textTitle}>{strings.optSentEnterbelow}</Text>
        <View>
          <TextInput
            ref={textInput}
            onChangeText={onChangeText}
            style={styles.otpInputText}
            value={internalVal}
            maxLength={lenthInput}
            returnKeyType="done"
            keyboardType="numeric"></TextInput>

          <View style={styles.containerInput}>
            {Array(lenthInput)
              .fill()
              .map((data, index) => (
                <TouchableWithoutFeedback key={index} onPress={handlePressCell}>
                  <View
                    style={[
                      styles.cellView,
                      {
                        borderBottomColor:
                          index === internalVal.length
                            ? OTP_INPUT_BOX_COLOR.HIGHLIGHTED_BODERBOTTOM_COLOR
                            : OTP_INPUT_BOX_COLOR.DEFAULT_BORDERBOTTOM_COLOR
                      },
                    ]}>
                    <Text style={styles.cellText}>
                      {internalVal[index] || ''}
                    </Text>
                  </View>
                </TouchableWithoutFeedback>
              ))}
          </View>
        </View>
        <View style={styles.bottomView}>
          <TouchableOpacity onPress={onResendOTP}>
            <View style={styles.btnResend}>
              <Text
                style={[
                  styles.txtResend,
                  {
                    color: enableResend
                      ? OTP_INPUT_BOX_COLOR.ENABLED_COLOR
                      : OTP_INPUT_BOX_COLOR.DISABLED_COLOR,
                  },
                ]}>
                Resend OTP({countDown})
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  containerAvoiddingView: {
    flex: 1,
    alignitems: 'center',
    padding: '10%',
  },
  otpInputText:{
    width: '80%',
    marginLeft: '10%',
    backgroundColor: 'red',
    position: 'absolute',
    opacity: 0,
  },
  textTitle: {
    marginTop: '20%',
    marginLeft: '15%',
    marginRight: '10%',
    marginBottom: '0%',
    fontSize: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
  },
  containerInput: {
    flexDirection: 'row',
    alignitems: 'center',
    justifyContent: 'center',
  },
  cellView: {
    paddingVertical: '4%',
    width: '13%',
    margin: '2%',
    justifyContent: 'center',
    alignitems: 'center',
    borderBottomWidth: 1.5,
  },
  cellText: {
    textAlign: 'center',
    fontSize: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
  },
  bottomView: {
    flexDirection: 'row',
    marginLeft: '10%',
    marginRight: '10%',
    marginBottom: '5%',
    alignitems: 'center',
  },
  btnChangeNumber: {
    width: '100%',
    height: '50%',
    borderRadius: 10,
    alignitems: 'flex-start',
    justifyContent: 'center',
  },
  textChange: {
    color: '#234DB7',
    alignItems: 'center',
    fontSize: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
  },
  btnResend: {
    width: '90%',
    height: '30%',
    borderRadius: 10,
    alignitems: 'flex-end',
    justifyContent: 'center',
    marginLeft: '1%',
  },
  txtResend: {
    alignItems: 'center',
    fontSize: FONT_CONSTANTS.FONT_SIZE_MEDIUM,
    marginLeft: '40%',
  },
});
