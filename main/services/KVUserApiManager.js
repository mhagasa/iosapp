import {API_METHOD, CONSTANT_API_URL, RESPONSE_STATUS} from '../constants/app-constants';
import KVResponse from '../models/KVResponse';
import KVApiManager from './KVApiManager';

export default class KVUserApiManager {
  /*
   * method to register user
   */
  registerUser = async payload => {
    let response = await KVApiManager.callApi(
      CONSTANT_API_URL.API_URL_USER_REGISTER,
      API_METHOD.POST,
      null,
      payload,
    );
    return response;
  };

  /*
   * method to login
   */
  login = async user => {
    let response;
    await fetch(CONSTANT_API_URL.API_URL_USER_LOGIN, {
      method: API_METHOD.POST,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(user),
    })
      .then(async res => {
        try {
          const jsonRes = await res.json();
          if (res.status !== 200) {
            response = new KVResponse(
              RESPONSE_STATUS.ERROR,
              res.status,
              jsonRes.message,
            );
          } else {
            const token = res.headers.map['auth-token'];
            let responseData = {token: token, userDetail: jsonRes};
            response = new KVResponse(
              RESPONSE_STATUS.SUCCESS,
              res.status,
              '',
              responseData,
            );
          }
        } catch (err) {
          response = new KVResponse(RESPONSE_STATUS.ERROR, '404', err.message);
        }
      })
      .catch(err => {
        response = new KVResponse(RESPONSE_STATUS.ERROR, '404', err.message);
      });
    return response;
  };

  verifyToken = async token => {
    let response;
    if (token) {
      response = await KVApiManager.callApi(
        CONSTANT_API_URL.API_URL_USER_VERIFY_TOKEN,
        API_METHOD.GET,
        token,
        null,
      );
      return response;
    } else {
      response = new KVResponse(
        RESPONSE_STATUS.ERROR,
        404,
        'No token available',
      );
    }

    return response;
  };
  /**
   * api for sending password reset otp and Resend OTP during User Registration
   */
  sendAutoGeneratedOtp = async mobile => {
    let response = await KVApiManager.callApi(
      CONSTANT_API_URL.API_URL_SEND_AUTOGENERATED_OTP,
      API_METHOD.POST,
      null,
      mobile,
    );
    return response;
  };
  /**
   * method to reset Password
   * @param {*} data 
   * @returns 
   */
  resetPassword = async data => {
    let response = await KVApiManager.callApi(
      CONSTANT_API_URL.API_URL_RESETPASSWORD,
      API_METHOD.POST,
      null,
      data,
    );
    return response;
  };
}
